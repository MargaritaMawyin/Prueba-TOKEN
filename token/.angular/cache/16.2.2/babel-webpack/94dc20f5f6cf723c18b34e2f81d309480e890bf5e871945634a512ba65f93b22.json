{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { interval } from 'rxjs';\nimport { takeWhile } from 'rxjs/operators';\nexport let TokenComponent = class TokenComponent {\n  constructor(registroService) {\n    this.registroService = registroService;\n    this.counter = 0; // Número inicial de segundos\n    this.isCounting = true; // Variable para controlar la visibilidad\n  }\n\n  ngOnInit() {\n    const min = 100000;\n    const max = 999999;\n    // Crea un observable que emite un valor cada segundo\n    const source = interval(100);\n    // this.tokenNumber=this.generateRandomToken();\n    this.tokenNumber = this.generateRandomToken();\n    // Usa takeWhile para detener el contador cuando llegue a cero\n    source.pipe(takeWhile(() => this.counter < 100)).subscribe(() => {\n      this.counter++;\n      while (this.counter === 100) {\n        this.counter = 0;\n        // Convierte el número aleatorio en una cadena de 6 dígitos (agregando ceros a la izquierda si es necesario)\n        this.tokenNumber = this.generateRandomToken();\n      }\n    });\n  }\n  generateToken() {\n    // Lógica para generar un nuevo token y establecerlo en las propiedades\n    this.tokenNumber = '123456'; // Número de token simulado\n    this.tokenExpiry = '2023-09-14 12:00 PM'; // Hora de expiración simulada\n  }\n\n  generateRandomToken() {\n    const min = 100000;\n    const max = 999999;\n    let token = \"\";\n    // Genera un número aleatorio entre 100000 y 999999 (ambos inclusive)\n    const randomNumber = Math.floor(Math.random() * (max - min + 1)) + min;\n    // Convierte el número aleatorio en una cadena de 6 dígitos (agregando ceros a la izquierda si es necesario)\n    token = randomNumber.toString().padStart(6, '0');\n    return token;\n  }\n  // Método para reiniciar el token\n  resetToken() {\n    this.tokenNumber = '';\n    this.tokenExpiry = '';\n  }\n};\nTokenComponent = __decorate([Component({\n  selector: 'app-token',\n  templateUrl: './token.component.html',\n  styleUrls: ['./token.component.css']\n})], TokenComponent);","map":{"version":3,"names":["Component","interval","takeWhile","TokenComponent","constructor","registroService","counter","isCounting","ngOnInit","min","max","source","tokenNumber","generateRandomToken","pipe","subscribe","generateToken","tokenExpiry","token","randomNumber","Math","floor","random","toString","padStart","resetToken","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\margo\\Documents\\token\\token\\src\\app\\token\\token.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { interval } from 'rxjs';\nimport { takeWhile } from 'rxjs/operators';\nimport { RegistroService } from './servicios/registro.service';\n\n@Component({\n  selector: 'app-token',\n  templateUrl: './token.component.html',\n  styleUrls: ['./token.component.css'],\n})\nexport class TokenComponent {\n  tokenNumber!: string;\n  tokenExpiry!: string;\n  counter: number = 0; // Número inicial de segundos\n  isCounting: boolean = true; // Variable para controlar la visibilidad\n\n  constructor(private registroService: RegistroService) { }\n  \n \n  \n  ngOnInit(): void {\n    const min = 100000;\n    const max = 999999;\n    // Crea un observable que emite un valor cada segundo\n    const source = interval(100);\n    // this.tokenNumber=this.generateRandomToken();\n    this.tokenNumber = this.generateRandomToken();\n\n    // Usa takeWhile para detener el contador cuando llegue a cero\n    source.pipe(\n      takeWhile(() => this.counter < 100)\n    ).subscribe(() => {\n      this.counter++;\n      while (this.counter === 100) {\n        this.counter = 0;\n        // Convierte el número aleatorio en una cadena de 6 dígitos (agregando ceros a la izquierda si es necesario)\n        this.tokenNumber = this.generateRandomToken();\n      }\n    });\n  }\n\n\n  \n  generateToken() {\n    // Lógica para generar un nuevo token y establecerlo en las propiedades\n    this.tokenNumber = '123456'; // Número de token simulado\n    this.tokenExpiry = '2023-09-14 12:00 PM'; // Hora de expiración simulada\n  }\n\n  generateRandomToken() {\n    const min = 100000;\n    const max = 999999;\n    let token = \"\";\n    // Genera un número aleatorio entre 100000 y 999999 (ambos inclusive)\n    const randomNumber = Math.floor(Math.random() * (max - min + 1)) + min;\n    // Convierte el número aleatorio en una cadena de 6 dígitos (agregando ceros a la izquierda si es necesario)\n    token = randomNumber.toString().padStart(6, '0');\n\n    return token;\n  }\n\n\n\n\n  // Método para reiniciar el token\n  resetToken() {\n    this.tokenNumber = '';\n    this.tokenExpiry = '';\n  }\n}\n"],"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AACjD,SAASC,QAAQ,QAAQ,MAAM;AAC/B,SAASC,SAAS,QAAQ,gBAAgB;AAQnC,WAAMC,cAAc,GAApB,MAAMA,cAAc;EAMzBC,YAAoBC,eAAgC;IAAhC,KAAAA,eAAe,GAAfA,eAAe;IAHnC,KAAAC,OAAO,GAAW,CAAC,CAAC,CAAC;IACrB,KAAAC,UAAU,GAAY,IAAI,CAAC,CAAC;EAE4B;;EAIxDC,QAAQA,CAAA;IACN,MAAMC,GAAG,GAAG,MAAM;IAClB,MAAMC,GAAG,GAAG,MAAM;IAClB;IACA,MAAMC,MAAM,GAAGV,QAAQ,CAAC,GAAG,CAAC;IAC5B;IACA,IAAI,CAACW,WAAW,GAAG,IAAI,CAACC,mBAAmB,EAAE;IAE7C;IACAF,MAAM,CAACG,IAAI,CACTZ,SAAS,CAAC,MAAM,IAAI,CAACI,OAAO,GAAG,GAAG,CAAC,CACpC,CAACS,SAAS,CAAC,MAAK;MACf,IAAI,CAACT,OAAO,EAAE;MACd,OAAO,IAAI,CAACA,OAAO,KAAK,GAAG,EAAE;QAC3B,IAAI,CAACA,OAAO,GAAG,CAAC;QAChB;QACA,IAAI,CAACM,WAAW,GAAG,IAAI,CAACC,mBAAmB,EAAE;;IAEjD,CAAC,CAAC;EACJ;EAIAG,aAAaA,CAAA;IACX;IACA,IAAI,CAACJ,WAAW,GAAG,QAAQ,CAAC,CAAC;IAC7B,IAAI,CAACK,WAAW,GAAG,qBAAqB,CAAC,CAAC;EAC5C;;EAEAJ,mBAAmBA,CAAA;IACjB,MAAMJ,GAAG,GAAG,MAAM;IAClB,MAAMC,GAAG,GAAG,MAAM;IAClB,IAAIQ,KAAK,GAAG,EAAE;IACd;IACA,MAAMC,YAAY,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,IAAIZ,GAAG,GAAGD,GAAG,GAAG,CAAC,CAAC,CAAC,GAAGA,GAAG;IACtE;IACAS,KAAK,GAAGC,YAAY,CAACI,QAAQ,EAAE,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;IAEhD,OAAON,KAAK;EACd;EAKA;EACAO,UAAUA,CAAA;IACR,IAAI,CAACb,WAAW,GAAG,EAAE;IACrB,IAAI,CAACK,WAAW,GAAG,EAAE;EACvB;CACD;AA3DYd,cAAc,GAAAuB,UAAA,EAL1B1B,SAAS,CAAC;EACT2B,QAAQ,EAAE,WAAW;EACrBC,WAAW,EAAE,wBAAwB;EACrCC,SAAS,EAAE,CAAC,uBAAuB;CACpC,CAAC,C,EACW1B,cAAc,CA2D1B"},"metadata":{},"sourceType":"module","externalDependencies":[]}