{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { interval } from 'rxjs';\nimport { takeWhile } from 'rxjs/operators';\nexport let TokenComponent = class TokenComponent {\n  constructor() {\n    this.counter = 5; // Número inicial de segundos\n    this.isCounting = true; // Variable para controlar la visibilidad\n  }\n\n  ngOnInit() {\n    // Crea un observable que emite un valor cada segundo\n    const source = interval(1000);\n    // Usa takeWhile para detener el contador cuando llegue a cero\n    source.pipe(takeWhile(() => this.counter > 0)).subscribe(() => {\n      this.counter--;\n      if (this.counter === 0) {\n        this.isCounting = false; // Oculta el contador cuando llegue a cero\n      }\n    });\n  }\n\n  generateToken() {\n    // Lógica para generar un nuevo token y establecerlo en las propiedades\n    this.tokenNumber = '123456'; // Número de token simulado\n    this.tokenExpiry = '2023-09-14 12:00 PM'; // Hora de expiración simulada\n  }\n  // Método para reiniciar el token\n  resetToken() {\n    this.tokenNumber = '';\n    this.tokenExpiry = '';\n  }\n};\nTokenComponent = __decorate([Component({\n  selector: 'app-token',\n  templateUrl: './token.component.html',\n  styleUrls: ['./token.component.css']\n})], TokenComponent);","map":{"version":3,"names":["Component","interval","takeWhile","TokenComponent","constructor","counter","isCounting","ngOnInit","source","pipe","subscribe","generateToken","tokenNumber","tokenExpiry","resetToken","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\margo\\Documents\\token\\token\\src\\app\\token\\token.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { interval } from 'rxjs';\nimport { takeWhile } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-token',\n  templateUrl: './token.component.html',\n  styleUrls: ['./token.component.css'],\n})\nexport class TokenComponent {\n  tokenNumber!: string;\n  tokenExpiry!: string;\n  counter: number = 5; // Número inicial de segundos\n  isCounting: boolean = true; // Variable para controlar la visibilidad\n\n  constructor() { }\n\n  ngOnInit(): void {\n    // Crea un observable que emite un valor cada segundo\n    const source = interval(1000);\n\n    // Usa takeWhile para detener el contador cuando llegue a cero\n    source.pipe(\n      takeWhile(() => this.counter > 0)\n    ).subscribe(() => {\n      this.counter--;\n      if (this.counter === 0) {\n        this.isCounting = false; // Oculta el contador cuando llegue a cero\n      }\n    });\n  }\n  generateToken() {\n    // Lógica para generar un nuevo token y establecerlo en las propiedades\n    this.tokenNumber = '123456'; // Número de token simulado\n    this.tokenExpiry = '2023-09-14 12:00 PM'; // Hora de expiración simulada\n  }\n\n  // Método para reiniciar el token\n  resetToken() {\n    this.tokenNumber = '';\n    this.tokenExpiry = '';\n  }\n}\n"],"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AACjD,SAASC,QAAQ,QAAQ,MAAM;AAC/B,SAASC,SAAS,QAAQ,gBAAgB;AAOnC,WAAMC,cAAc,GAApB,MAAMA,cAAc;EAMzBC,YAAA;IAHA,KAAAC,OAAO,GAAW,CAAC,CAAC,CAAC;IACrB,KAAAC,UAAU,GAAY,IAAI,CAAC,CAAC;EAEZ;;EAEhBC,QAAQA,CAAA;IACN;IACA,MAAMC,MAAM,GAAGP,QAAQ,CAAC,IAAI,CAAC;IAE7B;IACAO,MAAM,CAACC,IAAI,CACTP,SAAS,CAAC,MAAM,IAAI,CAACG,OAAO,GAAG,CAAC,CAAC,CAClC,CAACK,SAAS,CAAC,MAAK;MACf,IAAI,CAACL,OAAO,EAAE;MACd,IAAI,IAAI,CAACA,OAAO,KAAK,CAAC,EAAE;QACtB,IAAI,CAACC,UAAU,GAAG,KAAK,CAAC,CAAC;;IAE7B,CAAC,CAAC;EACJ;;EACAK,aAAaA,CAAA;IACX;IACA,IAAI,CAACC,WAAW,GAAG,QAAQ,CAAC,CAAC;IAC7B,IAAI,CAACC,WAAW,GAAG,qBAAqB,CAAC,CAAC;EAC5C;EAEA;EACAC,UAAUA,CAAA;IACR,IAAI,CAACF,WAAW,GAAG,EAAE;IACrB,IAAI,CAACC,WAAW,GAAG,EAAE;EACvB;CACD;AAjCYV,cAAc,GAAAY,UAAA,EAL1Bf,SAAS,CAAC;EACTgB,QAAQ,EAAE,WAAW;EACrBC,WAAW,EAAE,wBAAwB;EACrCC,SAAS,EAAE,CAAC,uBAAuB;CACpC,CAAC,C,EACWf,cAAc,CAiC1B"},"metadata":{},"sourceType":"module","externalDependencies":[]}