{"ast":null,"code":"var _class;\nimport { interval } from 'rxjs';\nimport { takeWhile } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../servicios/registro.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/material/progress-bar\";\nimport * as i4 from \"@angular/material/card\";\nfunction TokenComponent_div_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 6)(1, \"h2\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r0.counter);\n  }\n}\nexport class TokenComponent {\n  constructor(registroService) {\n    this.registroService = registroService;\n    this.counter = 0; // Número inicial de segundos\n    this.isCounting = true; // Variable para controlar la visibilidad\n  }\n\n  ngOnInit() {\n    this.registroService.obtenerRegistros().subscribe(data => {\n      console.log(data);\n    });\n    const min = 100000;\n    const max = 999999;\n    // Crea un observable que emite un valor cada segundo\n    const source = interval(100);\n    // this.tokenNumber=this.generateRandomToken();\n    this.tokenNumber = this.generateRandomToken();\n    // Usa takeWhile para detener el contador cuando llegue a cero\n    source.pipe(takeWhile(() => this.counter < 100)).subscribe(() => {\n      this.counter++;\n      while (this.counter === 100) {\n        this.counter = 0;\n        // Convierte el número aleatorio en una cadena de 6 dígitos (agregando ceros a la izquierda si es necesario)\n        this.tokenNumber = this.generateRandomToken();\n      }\n    });\n  }\n  generateToken() {\n    // Lógica para generar un nuevo token y establecerlo en las propiedades\n    this.tokenNumber = '123456'; // Número de token simulado\n    this.tokenExpiry = '2023-09-14 12:00 PM'; // Hora de expiración simulada\n  }\n\n  generateRandomToken() {\n    const min = 100000;\n    const max = 999999;\n    let token = \"\";\n    // Genera un número aleatorio entre 100000 y 999999 (ambos inclusive)\n    const randomNumber = Math.floor(Math.random() * (max - min + 1)) + min;\n    // Convierte el número aleatorio en una cadena de 6 dígitos (agregando ceros a la izquierda si es necesario)\n    token = randomNumber.toString().padStart(6, '0');\n    return token;\n  }\n  // Método para reiniciar el token\n  resetToken() {\n    this.tokenNumber = '';\n    this.tokenExpiry = '';\n  }\n  intercept(req, next) {\n    // Agregar encabezados CORS a la solicitud\n    const corsReq = req.clone({\n      setHeaders: {\n        'Access-Control-Allow-Origin': 'http://localhost:8000',\n        'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE',\n        'Access-Control-Allow-Headers': 'Content-Type'\n      }\n    });\n    return next.handle(corsReq);\n  }\n}\n_class = TokenComponent;\n_class.ɵfac = function TokenComponent_Factory(t) {\n  return new (t || _class)(i0.ɵɵdirectiveInject(i1.RegistroService));\n};\n_class.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: _class,\n  selectors: [[\"app-token\"]],\n  decls: 13,\n  vars: 3,\n  consts: [[1, \"token-container\"], [1, \"example-card\"], [1, \"countdown-container\"], [\"class\", \"countdown\", 4, \"ngIf\"], [1, \"example-section\"], [1, \"example-margin\", 3, \"value\"], [1, \"countdown\"]],\n  template: function TokenComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\")(2, \"mat-card\", 1)(3, \"mat-card-header\")(4, \"mat-card-title\");\n      i0.ɵɵtext(5, \"Token\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(6, \"mat-card-subtitle\");\n      i0.ɵɵtext(7);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(8, \"mat-card-content\")(9, \"div\", 2);\n      i0.ɵɵtemplate(10, TokenComponent_div_10_Template, 3, 1, \"div\", 3);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(11, \"section\", 4);\n      i0.ɵɵelement(12, \"mat-progress-bar\", 5);\n      i0.ɵɵelementEnd()()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(7);\n      i0.ɵɵtextInterpolate(ctx.tokenNumber);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngIf\", ctx.isCounting);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"value\", ctx.counter);\n    }\n  },\n  dependencies: [i2.NgIf, i3.MatProgressBar, i4.MatCard, i4.MatCardContent, i4.MatCardHeader, i4.MatCardSubtitle, i4.MatCardTitle],\n  styles: [\".example-h2[_ngcontent-%COMP%] {\\n  margin: 10px;\\n}\\n\\n.example-section[_ngcontent-%COMP%] {\\n  display: flex;\\n  align-content: center;\\n  align-items: center;\\n  height: 60px;\\n}\\n\\n.example-margin[_ngcontent-%COMP%] {\\n  margin: 0 10px;\\n}\\n\\n.example-card[_ngcontent-%COMP%] {\\n  margin-bottom: 10px;\\n}\\n\\n.countdown-container[_ngcontent-%COMP%] {\\n  text-align: center;\\n  padding: 20px;\\n}\\n\\n.countdown[_ngcontent-%COMP%] {\\n  font-size: 48px;\\n  color: #007bff; \\n\\n}\\n\\n.message[_ngcontent-%COMP%] {\\n  font-size: 24px;\\n  color: #28a745; \\n\\n}\\n\\n.example-card[_ngcontent-%COMP%] {\\n  max-width: 400px;\\n}\\n\\nmat-card-header[_ngcontent-%COMP%] {\\n  justify-content: center;\\n}\\n\\nmat-card-subtitle[_ngcontent-%COMP%]{\\n  font-size: 40px;\\n}\\n\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvdG9rZW4vdG9rZW4uY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLFlBQVk7QUFDZDs7QUFFQTtFQUNFLGFBQWE7RUFDYixxQkFBcUI7RUFDckIsbUJBQW1CO0VBQ25CLFlBQVk7QUFDZDs7QUFFQTtFQUNFLGNBQWM7QUFDaEI7O0FBRUE7RUFDRSxtQkFBbUI7QUFDckI7O0FBRUE7RUFDRSxrQkFBa0I7RUFDbEIsYUFBYTtBQUNmOztBQUVBO0VBQ0UsZUFBZTtFQUNmLGNBQWMsRUFBRSxlQUFlO0FBQ2pDOztBQUVBO0VBQ0UsZUFBZTtFQUNmLGNBQWMsRUFBRSxnQkFBZ0I7QUFDbEM7O0FBRUE7RUFDRSxnQkFBZ0I7QUFDbEI7O0FBRUE7RUFDRSx1QkFBdUI7QUFDekI7O0FBRUE7RUFDRSxlQUFlO0FBQ2pCIiwic291cmNlc0NvbnRlbnQiOlsiLmV4YW1wbGUtaDIge1xyXG4gIG1hcmdpbjogMTBweDtcclxufVxyXG5cclxuLmV4YW1wbGUtc2VjdGlvbiB7XHJcbiAgZGlzcGxheTogZmxleDtcclxuICBhbGlnbi1jb250ZW50OiBjZW50ZXI7XHJcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICBoZWlnaHQ6IDYwcHg7XHJcbn1cclxuXHJcbi5leGFtcGxlLW1hcmdpbiB7XHJcbiAgbWFyZ2luOiAwIDEwcHg7XHJcbn1cclxuXHJcbi5leGFtcGxlLWNhcmQge1xyXG4gIG1hcmdpbi1ib3R0b206IDEwcHg7XHJcbn1cclxuXHJcbi5jb3VudGRvd24tY29udGFpbmVyIHtcclxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgcGFkZGluZzogMjBweDtcclxufVxyXG5cclxuLmNvdW50ZG93biB7XHJcbiAgZm9udC1zaXplOiA0OHB4O1xyXG4gIGNvbG9yOiAjMDA3YmZmOyAvKiBDb2xvciBhenVsICovXHJcbn1cclxuXHJcbi5tZXNzYWdlIHtcclxuICBmb250LXNpemU6IDI0cHg7XHJcbiAgY29sb3I6ICMyOGE3NDU7IC8qIENvbG9yIHZlcmRlICovXHJcbn1cclxuXHJcbi5leGFtcGxlLWNhcmQge1xyXG4gIG1heC13aWR0aDogNDAwcHg7XHJcbn1cclxuXHJcbm1hdC1jYXJkLWhlYWRlciB7XHJcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XHJcbn1cclxuXHJcbm1hdC1jYXJkLXN1YnRpdGxle1xyXG4gIGZvbnQtc2l6ZTogNDBweDtcclxufVxyXG4iXSwic291cmNlUm9vdCI6IiJ9 */\"]\n});","map":{"version":3,"names":["interval","takeWhile","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵtextInterpolate","ctx_r0","counter","TokenComponent","constructor","registroService","isCounting","ngOnInit","obtenerRegistros","subscribe","data","console","log","min","max","source","tokenNumber","generateRandomToken","pipe","generateToken","tokenExpiry","token","randomNumber","Math","floor","random","toString","padStart","resetToken","intercept","req","next","corsReq","clone","setHeaders","handle","ɵɵdirectiveInject","i1","RegistroService","selectors","decls","vars","consts","template","TokenComponent_Template","rf","ctx","ɵɵtemplate","TokenComponent_div_10_Template","ɵɵelement","ɵɵproperty"],"sources":["C:\\Users\\margo\\Documents\\token\\token\\src\\app\\token\\token.component.ts","C:\\Users\\margo\\Documents\\token\\token\\src\\app\\token\\token.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { interval } from 'rxjs';\nimport { takeWhile } from 'rxjs/operators';\nimport { RegistroService } from '../servicios/registro.service'\nimport { Injectable } from '@angular/core';\nimport {\n  HttpInterceptor,\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'app-token',\n  templateUrl: './token.component.html',\n  styleUrls: ['./token.component.css'],\n})\nexport class TokenComponent {\n  \n  tokenNumber!: string;\n  tokenExpiry!: string;\n  counter: number = 0; // Número inicial de segundos\n  isCounting: boolean = true; // Variable para controlar la visibilidad\n\n  constructor(private registroService: RegistroService) { }\n \n  \n  \n  ngOnInit(): void {\n    this.registroService.obtenerRegistros().subscribe(\n      data =>{\n      console.log(data);\n\n    });\n\n    const min = 100000;\n    const max = 999999;\n    // Crea un observable que emite un valor cada segundo\n    const source = interval(100);\n    // this.tokenNumber=this.generateRandomToken();\n    this.tokenNumber = this.generateRandomToken();\n\n    // Usa takeWhile para detener el contador cuando llegue a cero\n    source.pipe(\n      takeWhile(() => this.counter < 100)\n    ).subscribe(() => {\n      this.counter++;\n      while (this.counter === 100) {\n        this.counter = 0;\n        // Convierte el número aleatorio en una cadena de 6 dígitos (agregando ceros a la izquierda si es necesario)\n        this.tokenNumber = this.generateRandomToken();\n      }\n    });\n  }\n\n\n  \n  generateToken() {\n    // Lógica para generar un nuevo token y establecerlo en las propiedades\n    this.tokenNumber = '123456'; // Número de token simulado\n    this.tokenExpiry = '2023-09-14 12:00 PM'; // Hora de expiración simulada\n  }\n\n  generateRandomToken() {\n    const min = 100000;\n    const max = 999999;\n    let token = \"\";\n    // Genera un número aleatorio entre 100000 y 999999 (ambos inclusive)\n    const randomNumber = Math.floor(Math.random() * (max - min + 1)) + min;\n    // Convierte el número aleatorio en una cadena de 6 dígitos (agregando ceros a la izquierda si es necesario)\n    token = randomNumber.toString().padStart(6, '0');\n\n    return token;\n  }\n\n\n\n\n  // Método para reiniciar el token\n  resetToken() {\n    this.tokenNumber = '';\n    this.tokenExpiry = '';\n  }\n  \n  intercept(\n    req: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    // Agregar encabezados CORS a la solicitud\n    const corsReq = req.clone({\n      setHeaders: {\n        'Access-Control-Allow-Origin': 'http://localhost:8000', // Reemplaza con la URL de tu servidor Django\n        'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE',\n        'Access-Control-Allow-Headers': 'Content-Type',\n      },\n    });\n\n    return next.handle(corsReq);\n  }\n}\n","<!-- token-virtual.component.html -->\n\n<div class=\"token-container\">\n  <div >\n    <!-- <p>Número de Token: {{ tokenNumber }}</p> -->\n    <!-- <p>Expira: {{ tokenExpiry }}</p> -->\n\n    <mat-card class=\"example-card\">\n      <mat-card-header>\n        <mat-card-title>Token</mat-card-title>\n        <mat-card-subtitle>{{ tokenNumber }}</mat-card-subtitle>\n      </mat-card-header>\n      <mat-card-content>\n        <div class=\"countdown-container\">\n         \n          <div *ngIf=\"isCounting\" class=\"countdown\">\n            <h2>{{ counter }}</h2>\n          </div>\n          <!-- <div *ngIf=\"!isCounting\" class=\"message\">\n            <p>¡Tiempo terminado!</p>\n          </div> -->\n        </div>\n        <section class=\"example-section\">\n          <mat-progress-bar class=\"example-margin\" [value]=\"counter\" >\n          </mat-progress-bar>\n        </section>\n      </mat-card-content>\n      <!-- <mat-card-actions>\n        <button mat-button>LIKE</button>\n        <button mat-button>SHARE</button>\n      </mat-card-actions> -->\n    </mat-card>\n  </div>\n</div>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}